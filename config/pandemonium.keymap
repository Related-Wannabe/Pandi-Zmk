/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define ALPHA 0
#define NUMFN 1
#define SYMBL 2
#define NAVVL 3

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        Q_ESC: Q_ESC {
            compatible = "zmk,behavior-tap-dance";
            label = "Q_ESC";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp ESCAPE>;
        };

        W_Close: W_Close {
            compatible = "zmk,behavior-tap-dance";
            label = "W_CLOSE";
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp LC(W)>;
        };

        Dot_Qmark: Dot_Qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_QMARK";
            bindings = <&kp PERIOD>, <&kp QMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        Slsh_GT: Slsh_GT {
            compatible = "zmk,behavior-mod-morph";
            label = "SLSH_GT";
            bindings = <&kp SLASH>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };
};

/ {
};

/ {
    combos {
        compatible = "zmk,combos";

        Enter {
            bindings = <&kp RET>;
            key-positions = <16 17 18>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <11 12 13>;
        };

        Mute {
            bindings = <&kp C_MUTE>;
            key-positions = <20 21>;
            layers = <1>;
        };

        Lpare {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <1 2>;
        };

        Rpare {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <8 7>;
        };

        Reset {
            bindings = <&sys_reset>;
            key-positions = <0 29 28 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ALPHA {
            bindings = <
&Q_ESC              &W_Close     &kp F           &kp P            &kp B   &kp J        &kp L  &kp U            &kp Y        &kp APOS
&kp A               &hm LCTRL R  &hm LEFT_ALT S  &kp T            &kp G   &kp M        &kp N  &hm RIGHT_ALT E  &hm RCTRL I  &kp O
&hm LC(LEFT_GUI) X  &hm LC(C) C  &hm LC(D) D     &hm LC(V) V      &kp Z   &kp K        &kp H  &kp COMMA                     &Dot_Qmark
&lt 1 LGUI                       &lt 1 ESCAPE    &mt LSHIFT BSPC  &trans  &lt 3 SPACE         &Slsh_GT
            >;
        };

        NUMFN {
            bindings = <
&soft_off     &none         &none         &none         &none  &none  &none  &none  &none  &out OUT_TOG
&bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &none  &none  &none  &none  &none  &none
&kp C_VOL_DN  &kp C_VOL_UP  &none         &none         &none  &none  &none  &none         &bt BT_CLR_ALL
&none                       &trans        &none         &none  &none         &none
            >;
        };

        SYMBL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans
&trans          &trans  &trans  &trans  &trans          &trans
            >;
        };

        NAVVL {
            bindings = <
&caps_word      &none           &kp UP        &none            &trans    &kp TILDE  &kp N7  &kp N8  &kp N9  &kp BSLH
&kp SEMI        &kp LEFT        &kp DOWN      &kp RIGHT        &trans    &kp MINUS  &kp N1  &kp N2  &kp N3  &kp N0
&mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &mkp MB1  &kp EQUAL  &kp N4  &kp N5          &kp N6
&trans                          &trans        &trans           &trans    &trans             &trans
            >;
        };
    };
};
